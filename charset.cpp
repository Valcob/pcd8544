/*
 * PCD8544 - Interface with Philips PCD8544 (or compatible) LCDs.
 *
 * Copyright (c) 2010 Carlos Rodrigues <cefrodrigues@gmail.com>
 * Copyright (c) 2018+ ValCob
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


#if defined (__XTENSA__)
#include <pgmspace.h>
#else
#include <avr/pgmspace.h>
#endif


// The 7-bit ASCII character set...
const PROGMEM uint8_t Plain_5[] = {
    0x05, // Width: 5
    0x08, // Height: 8
    0x20, // First Char: 32
    0x60, // Number of Chars: 96

    // Jump Table:
  // MSB   LSB  size  width
    0xFF, 0xFF, 0x05, 0x03,  // 32:65535
    0x00, 0x00, 0x05, 0x05,  // 33:0
    0x00, 0x05, 0x05, 0x05,  // 34:5
    0x00, 0x0A, 0x05, 0x05,  // 35:10
    0x00, 0x0F, 0x05, 0x05,  // 36:15
    0x00, 0x14, 0x05, 0x05,  // 37:20
    0x00, 0x19, 0x05, 0x05,  // 38:25
    0x00, 0x1E, 0x05, 0x05,  // 39:30
    0x00, 0x23, 0x05, 0x05,  // 40:35
    0x00, 0x28, 0x05, 0x05,  // 41:40
    0x00, 0x2D, 0x05, 0x05,  // 42:45
    0x00, 0x32, 0x05, 0x05,  // 43:50
    0x00, 0x37, 0x05, 0x05,  // 44:55
    0x00, 0x3C, 0x05, 0x05,  // 45:60
    0x00, 0x41, 0x05, 0x05,  // 46:65
    0x00, 0x46, 0x05, 0x05,  // 47:70
    0x00, 0x4B, 0x05, 0x05,  // 48:75
    0x00, 0x50, 0x05, 0x05,  // 49:80
    0x00, 0x55, 0x05, 0x05,  // 50:85
    0x00, 0x5A, 0x05, 0x05,  // 51:90
    0x00, 0x5F, 0x05, 0x05,  // 52:95
    0x00, 0x64, 0x05, 0x05,  // 53:100
    0x00, 0x69, 0x05, 0x05,  // 54:105
    0x00, 0x6E, 0x05, 0x05,  // 55:110
    0x00, 0x73, 0x05, 0x05,  // 56:115
    0x00, 0x78, 0x05, 0x05,  // 57:120
    0x00, 0x7D, 0x05, 0x05,  // 58:125
    0x00, 0x82, 0x05, 0x05,  // 59:130
    0x00, 0x87, 0x05, 0x05,  // 60:135
    0x00, 0x8C, 0x05, 0x05,  // 61:140
    0x00, 0x91, 0x05, 0x05,  // 62:145
    0x00, 0x96, 0x05, 0x05,  // 63:150
    0x00, 0x9B, 0x05, 0x05,  // 64:155
    0x00, 0xA0, 0x05, 0x05,  // 65:160
    0x00, 0xA5, 0x05, 0x05,  // 66:165
    0x00, 0xAA, 0x05, 0x05,  // 67:170
    0x00, 0xAF, 0x05, 0x05,  // 68:175
    0x00, 0xB4, 0x05, 0x05,  // 69:180
    0x00, 0xB9, 0x05, 0x05,  // 70:185
    0x00, 0xBE, 0x05, 0x05,  // 71:190
    0x00, 0xC3, 0x05, 0x05,  // 72:195
    0x00, 0xC8, 0x05, 0x05,  // 73:200
    0x00, 0xCD, 0x05, 0x05,  // 74:205
    0x00, 0xD2, 0x05, 0x05,  // 75:210
    0x00, 0xD7, 0x05, 0x05,  // 76:215
    0x00, 0xDC, 0x05, 0x05,  // 77:220
    0x00, 0xE1, 0x05, 0x05,  // 78:225
    0x00, 0xE6, 0x05, 0x05,  // 79:230
    0x00, 0xEB, 0x05, 0x05,  // 80:235
    0x00, 0xF0, 0x05, 0x05,  // 81:240
    0x00, 0xF5, 0x05, 0x05,  // 82:245
    0x00, 0xFA, 0x05, 0x05,  // 83:250
    0x00, 0xFF, 0x05, 0x05,  // 84:255
    0x01, 0x04, 0x05, 0x05,  // 85:260
    0x01, 0x09, 0x05, 0x05,  // 86:265
    0x01, 0x0E, 0x05, 0x05,  // 87:270
    0x01, 0x13, 0x05, 0x05,  // 88:275
    0x01, 0x18, 0x05, 0x05,  // 89:280
    0x01, 0x1D, 0x05, 0x05,  // 90:285
    0x01, 0x22, 0x05, 0x05,  // 91:290
    0x01, 0x27, 0x05, 0x05,  // 92:295
    0x01, 0x2C, 0x05, 0x05,  // 93:300
    0x01, 0x31, 0x05, 0x05,  // 94:305
    0x01, 0x36, 0x05, 0x05,  // 95:310
    0x01, 0x3B, 0x05, 0x05,  // 96:315
    0x01, 0x40, 0x05, 0x05,  // 97:320
    0x01, 0x45, 0x05, 0x05,  // 98:325
    0x01, 0x4A, 0x05, 0x05,  // 99:330
    0x01, 0x4F, 0x05, 0x05,  // 100:335
    0x01, 0x54, 0x05, 0x05,  // 101:340
    0x01, 0x59, 0x05, 0x05,  // 102:345
    0x01, 0x5E, 0x05, 0x05,  // 103:350
    0x01, 0x63, 0x05, 0x05,  // 104:355
    0x01, 0x68, 0x05, 0x05,  // 105:360
    0x01, 0x6D, 0x05, 0x05,  // 106:365
    0x01, 0x72, 0x05, 0x05,  // 107:370
    0x01, 0x77, 0x05, 0x05,  // 108:375
    0x01, 0x7C, 0x05, 0x05,  // 109:380
    0x01, 0x81, 0x05, 0x05,  // 110:385
    0x01, 0x86, 0x05, 0x05,  // 111:390
    0x01, 0x8B, 0x05, 0x05,  // 112:395
    0x01, 0x90, 0x05, 0x05,  // 113:400
    0x01, 0x95, 0x05, 0x05,  // 114:405
    0x01, 0x9A, 0x05, 0x05,  // 115:410
    0x01, 0x9F, 0x05, 0x05,  // 116:415
    0x01, 0xA4, 0x05, 0x05,  // 117:420
    0x01, 0xA9, 0x05, 0x05,  // 118:425
    0x01, 0xAE, 0x05, 0x05,  // 119:430
    0x01, 0xB3, 0x05, 0x05,  // 120:435
    0x01, 0xB8, 0x05, 0x05,  // 121:440
    0x01, 0xBD, 0x05, 0x05,  // 122:445
    0x01, 0xC2, 0x05, 0x05,  // 123:450
    0x01, 0xC7, 0x05, 0x05,  // 124:455
    0x01, 0xCC, 0x05, 0x05,  // 125:460
    0x01, 0xD1, 0x05, 0x05,  // 126:465
    0xFF, 0xFF, 0x05, 0x05,  // 127:65535

   // Font Data:
//0x00, 0x00, 0x00, 0x00, 0x00 ,  // 32 // 20 space
  0x00, 0x00, 0x5e, 0x00, 0x00 ,  // 33 // 21 !
  0x00, 0x0e, 0x00, 0x0e, 0x00 ,  // 34 // 22 "
  0x24, 0x7e, 0x24, 0x7e, 0x24 ,  // 35 // 23 #
  0x48, 0x54, 0xfe, 0x54, 0x24 ,  // 36 // 24 $
  0x23, 0x13, 0x08, 0x64, 0x62 ,  // 37 // 25 %
  0x36, 0x49, 0x55, 0x22, 0x50 ,  // 38 // 26 &
  0x00, 0x05, 0x03, 0x00, 0x00 ,  // 39 // 27 '
  0x00, 0x1c, 0x22, 0x41, 0x00 ,  // 40 // 28 (
  0x00, 0x41, 0x22, 0x1c, 0x00 ,  // 41 // 29 )
  0x14, 0x08, 0x3e, 0x08, 0x14 ,  // 42 // 2a *
  0x00, 0x10, 0x38, 0x10, 0x00 ,  // 43 // 2b +
  0x00, 0x50, 0x30, 0x00, 0x00 ,  // 44 // 2c ,
  0x00, 0x10, 0x10, 0x10, 0x00 ,  // 45 // 2d -
  0x00, 0xc0, 0xc0, 0x00, 0x00 ,  // 46 // 2e .
  0x20, 0x10, 0x08, 0x04, 0x02 ,  // 47 // 2f /
  0x7c, 0xa2, 0x92, 0x8a, 0x7c ,  // 48 // 30 0
  0x00, 0x84, 0xfe, 0x80, 0x00 ,  // 49 // 31 1
  0x84, 0xc2, 0xa2, 0x92, 0x8c ,  // 50 // 32 2
  0x42, 0x82, 0x8a, 0x96, 0x62 ,  // 51 // 33 3
  0x30, 0x28, 0x24, 0xfe, 0x20 ,  // 52 // 34 4
  0x4e, 0x8a, 0x8a, 0x8a, 0x72 ,  // 53 // 35 5
  0x78, 0x94, 0x92, 0x92, 0x60 ,  // 54 // 36 6
  0x02, 0xe2, 0x12, 0x0a, 0x06 ,  // 55 // 37 7
  0x6c, 0x92, 0x92, 0x92, 0x6c ,  // 56 // 38 8
  0x0c, 0x92, 0x92, 0x52, 0x3c ,  // 57 // 39 9
  0x00, 0x6c, 0x6c, 0x00, 0x00 ,  // 58 // 3a :
  0x00, 0x56, 0x36, 0x00, 0x00 ,  // 59 // 3b ;
  0x08, 0x14, 0x22, 0x41, 0x00 ,  // 60 // 3c <
  0x00, 0x28, 0x28, 0x28, 0x00 ,  // 61 // 3d =
  0x00, 0x41, 0x22, 0x14, 0x08 ,  // 62 // 3e >
  0x02, 0x01, 0x51, 0x09, 0x06 ,  // 63 // 3f ?
  0x32, 0x49, 0x79, 0x41, 0x3e ,  // 64 // 40 @
  0xfc, 0x22, 0x22, 0x22, 0xfc ,  // 65 // 41 A
  0xfe, 0x92, 0x92, 0x92, 0x6c ,  // 66 // 42 B
  0x7c, 0x82, 0x82, 0x82, 0x44 ,  // 67 // 43 C
  0xfe, 0x82, 0x82, 0x44, 0x38 ,  // 68 // 44 D
  0xfe, 0x92, 0x92, 0x92, 0x82 ,  // 69 // 45 E
  0xfe, 0x12, 0x12, 0x12, 0x02 ,  // 70 // 46 F
  0x7c, 0x82, 0x92, 0x92, 0xf4 ,  // 71 // 47 G
  0xfe, 0x10, 0x10, 0x10, 0xfe ,  // 72 // 48 H
  0x00, 0x82, 0xfe, 0x82, 0x00 ,  // 73 // 49 I
  0x40, 0x80, 0x82, 0x7e, 0x02 ,  // 74 // 4a J
  0xfe, 0x10, 0x28, 0x44, 0x82 ,  // 75 // 4b K
  0xfe, 0x80, 0x80, 0x80, 0x80 ,  // 76 // 4c L
  0xfe, 0x04, 0x18, 0x04, 0xfe ,  // 77 // 4d M
  0xfe, 0x08, 0x10, 0x20, 0xfe ,  // 78 // 4e N
  0x7c, 0x82, 0x82, 0x82, 0x7c ,  // 79 // 4f O
  0xfe, 0x12, 0x12, 0x12, 0x0c ,  // 80 // 50 P
  0x7c, 0x82, 0xa2, 0x42, 0xbc ,  // 81 // 51 Q
  0xfe, 0x12, 0x32, 0x52, 0x8c ,  // 82 // 52 R
  0x8c, 0x92, 0x92, 0x92, 0x62 ,  // 83 // 53 S
  0x02, 0x02, 0xfe, 0x02, 0x02 ,  // 84 // 54 T
  0x7e, 0x80, 0x80, 0x80, 0x7e ,  // 85 // 55 U
  0x3e, 0x40, 0x80, 0x40, 0x3e ,  // 86 // 56 V
  0x7e, 0x80, 0x70, 0x80, 0x7e ,  // 87 // 57 W
  0xc6, 0x28, 0x10, 0x28, 0xc6 ,  // 88 // 58 X
  0x0e, 0x10, 0xe0, 0x10, 0x0e ,  // 89 // 59 Y
  0xc2, 0xa2, 0x92, 0x8a, 0x86 ,  // 90 // 5a Z
  0x00, 0x7f, 0x41, 0x41, 0x00 ,  // 91 // 5b [
  0x02, 0x04, 0x08, 0x10, 0x20 ,  // 92 // 5c backslash
  0x00, 0x41, 0x41, 0x7f, 0x00 ,  // 93 // 5d ]
  0x04, 0x02, 0x01, 0x02, 0x04 ,  // 94 // 5e ^
  0x40, 0x40, 0x40, 0x40, 0x40 ,  // 95 // 5f _
  0x00, 0x01, 0x02, 0x04, 0x00 ,  // 96 // 60 `
  0x40, 0xa8, 0xa8, 0xa8, 0xf0 ,  // 97 // 61 a
  0xfe, 0x90, 0x88, 0x88, 0x70 ,  // 98 // 62 b
  0x70, 0x88, 0x88, 0x88, 0x00 ,  // 99 // 63 c
  0x70, 0x88, 0x88, 0x90, 0xfe ,  // 100 // 64 d
  0x70, 0xa8, 0xa8, 0xa8, 0x10 ,  // 101 // 65 e
  0x10, 0xfc, 0x12, 0x02, 0x04 ,  // 102 // 66 f
  0x18, 0xa4, 0xa4, 0xa4, 0x7c ,  // 103 // 67 g
  0xfe, 0x10, 0x08, 0x08, 0xf0 ,  // 104 // 68 h
  0x00, 0x88, 0xfa, 0x80, 0x00 ,  // 105 // 69 i
  0x40, 0x80, 0x88, 0x7a, 0x00 ,  // 106 // 6a j
  0xfe, 0x20, 0x50, 0x88, 0x00 ,  // 107 // 6b k
  0x00, 0x82, 0xfe, 0x80, 0x00 ,  // 108 // 6c l
  0xf8, 0x08, 0x30, 0x08, 0xf0 ,  // 109 // 6d m
  0xf8, 0x10, 0x08, 0x08, 0xf0 ,  // 110 // 6e n
  0x70, 0x88, 0x88, 0x88, 0x70 ,  // 111 // 6f o
  0xf8, 0x28, 0x28, 0x28, 0x10 ,  // 112 // 70 p
  0x10, 0x28, 0x28, 0x30, 0xf8 ,  // 113 // 71 q
  0xf8, 0x10, 0x08, 0x08, 0x10 ,  // 114 // 72 r
  0x10, 0xa8, 0xa8, 0xa8, 0x40 ,  // 115 // 73 s
  0x08, 0x7e, 0x88, 0x80, 0x40 ,  // 116 // 74 t
  0x78, 0x80, 0x80, 0x40, 0xf8 ,  // 117 // 75 u
  0x38, 0x40, 0x80, 0x40, 0x38 ,  // 118 // 76 v
  0x78, 0x80, 0x60, 0x80, 0x78 ,  // 119 // 77 w
  0x88, 0x50, 0x20, 0x50, 0x88 ,  // 120 // 78 x
  0x18, 0xa0, 0xa0, 0xa0, 0x78 ,  // 121 // 79 y
  0x88, 0xc8, 0xa8, 0x98, 0x88 ,  // 122 // 7a z
  0x00, 0x08, 0x36, 0x41, 0x00 ,  // 123 // 7b {
  0x00, 0x00, 0x7f, 0x00, 0x00 ,  // 124 // 7c |
  0x00, 0x41, 0x36, 0x08, 0x00 ,  // 125 // 7d }
  0x10, 0x08, 0x08, 0x10, 0x08 ,  // 126 // 7e ~
  0x00, 0x00, 0x00, 0x00, 0x00    // 127 // 7f
};




const PROGMEM uint8_t MediumNumbers[]  =
{
    0x0C, // Width:  12
    0x10, // Height: 16
    0x2D, // First Char: 45
    0x0D, // Number of Chars: 13

  // Jump Table:
  // MSB   LSB  size  width
    0x00, 0x00, 0x18, 0x0C,  // 45:0
    0x00, 0x18, 0x08, 0x04,  // 46:24
    0x00, 0x20, 0x18, 0x0C,  // 47:32
    0x00, 0x38, 0x18, 0x0C,  // 48:56
    0x00, 0x50, 0x18, 0x0C,  // 49:80
    0x00, 0x68, 0x18, 0x0C,  // 50:104
    0x00, 0x80, 0x18, 0x0C,  // 51:128
    0x00, 0x98, 0x18, 0x0C,  // 52:152
    0x00, 0xB0, 0x18, 0x0C,  // 53:176
    0x00, 0xC8, 0x18, 0x0C,  // 54:200
    0x00, 0xE0, 0x18, 0x0C,  // 55:224
    0x00, 0xF8, 0x18, 0x0C,  // 56:248
    0x01, 0x10, 0x18, 0x0C,  // 57:272

  // Font Data:
  0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00,   // -     n = (row * col + config bytes)  13 * 24 + 4 = 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00,                                                                                                   // .
  0x00, 0x00, 0x02, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x02, 0x00, 0x00, 0x00, 0x00, 0x81, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x81, 0x00, 0x00,   // /
  0x00, 0xfc, 0x7a, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7a, 0xfc, 0x00, 0x00, 0x7e, 0xbc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xbc, 0x7e, 0x00,   // 0
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7e, 0x00,   // 1
  0x00, 0x00, 0x02, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7a, 0xfc, 0x00, 0x00, 0x7e, 0xbd, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x81, 0x00, 0x00,   // 2
  0x00, 0x00, 0x02, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7a, 0xfc, 0x00, 0x00, 0x00, 0x81, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e, 0x00,   // 3
  0x00, 0xfc, 0x78, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x78, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x3d, 0x7e, 0x00,   // 4
  0x00, 0xfc, 0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x02, 0x00, 0x00, 0x00, 0x00, 0x81, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e, 0x00,   // 5
  0x00, 0xfc, 0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x02, 0x00, 0x00, 0x00, 0x7e, 0xbd, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e, 0x00,   // 6
  0x00, 0x00, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7a, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7e, 0x00,   // 7
  0x00, 0xfc, 0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7a, 0xfc, 0x00, 0x00, 0x7e, 0xbd, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e, 0x00,   // 8
  0x00, 0xfc, 0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7a, 0xfc, 0x00, 0x00, 0x00, 0x81, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xbd, 0x7e, 0x00,   // 9
};


const PROGMEM uint8_t BigNumbers[]  =
{
    0x0E, // Width:  14
    0x18, // Height: 24
    0x2D, // First Char: 45
    0x0D, // Number of Chars: 13

      // Jump Table:
  // MSB   LSB  size  width
    0x00, 0x00, 0x2A, 0x0E,  // 45:42
    0x00, 0x2A, 0x2A, 0x0E,  // 46:84
    0x00, 0x54, 0x2A, 0x0E,  // 47:126
    0x00, 0x7E, 0x2A, 0x0E,  // 48:168
    0x00, 0xA8, 0x2A, 0x0E,  // 49:210
    0x00, 0xD2, 0x2A, 0x0E,  // 50:252
    0x00, 0xFC, 0x2A, 0x0E,  // 51:294
    0x01, 0x26, 0x2A, 0x0E,  // 52:336
    0x01, 0x50, 0x2A, 0x0E,  // 53:378
    0x01, 0x7A, 0x2A, 0x0E,  // 54:420
    0x01, 0xA4, 0x2A, 0x0E,  // 55:462
    0x01, 0xCE, 0x2A, 0x0E,  // 56:504
    0x01, 0xF8, 0x2A, 0x0E,  // 57:546

  // Font Data:
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // -
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xe0, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,   // .
  0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00,   // /
  0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0xef, 0xc7, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef, 0x00, 0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 0
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x00,   // 1
  0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0xe0, 0xd0, 0xb8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3b, 0x17, 0x0f, 0x00, 0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00,   // 2
  0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 3
  0x00, 0xfc, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0xfc, 0x00, 0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x00,   // 4
  0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xb8, 0xd0, 0xe0, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 5
  0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0xef, 0xd7, 0xbb, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xb8, 0xd0, 0xe0, 0x00, 0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 6
  0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x00,   // 7
  0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0xef, 0xd7, 0xbb, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef, 0x00, 0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 8
  0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 9

};
